compile project(‘:pdk’)
 //imports
 import com.pinterest.android.pdk.PDKCallback;
 import com.pinterest.android.pdk.PDKClient;
 import com.pinterest.android.pdk.PDKException;
 import com.pinterest.android.pdk.PDKResponse;

 //inside onCreate
 PDKClient.configureInstance(this, {YOUR_APP_ID});
 PDKClient.getInstance().onConnect(this);
 <uses-permission android:name="android.permission.INTERNET"/>
  <intent-filter>
     <action android:name="android.intent.action.VIEW" />
     <category android:name="android.intent.category.DEFAULT" />
     <category android:name="android.intent.category.BROWSABLE" />
     <data android:scheme="pdk{YOUR_APP_ID}" />
 </intent-filter>
 List scopes = new ArrayList<String>();
    scopes.add(PDKClient.PDKCLIENT_PERMISSION_READ_PUBLIC);
    scopes.add(PDKClient.PDKCLIENT_PERMISSION_WRITE_PUBLIC);

pdkClient.login(this, scopes, new PDKCallback() {
    @Override
    public void onSuccess(PDKResponse response) {
        Log.d(getClass().getName(), response.getData().toString());
        //user logged in, use response.getUser() to get PDKUser object
    }

    @Override
    public void onFailure(PDKException exception) {
        Log.e(getClass().getName(), exception.getDetailMessage());
    }
});@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    PDKClient.getInstance().onOauthResponse(requestCode, resultCode, data);
} /**  @param path         The path to endpoint
   *  @param params       Any parameters that need to be sent to the endpoint 
   *  @param callback     Instance of PDKCallback to receive success and failure callbacks
   */
   getPath(String path, HashMap<String, String> params, PDKCallback callback)
    /**  @param path         The path to the endpoint 
   *  @param params       Any parameters that need to be sent to the endpoint
   *  @param callback     Instance of PDKCallback to receive success and failure callbacks
   */
  postPath(String path, HashMap<String, String> params, PDKCallback callback)
   /**  @param path         The path to the endpoint 
   *  @param params       Any parameters that need to be sent to the endpoint
   *  @param callback     Instance of PDKCallback to receive success and failure callbacks
   */
  putPath(String path, HashMap<String, String> params, PDKCallback callback)
    /**  @param path         The path to the endpoint 
   *  @param params       Any parameters that need to be sent to the endpoint
   *  @param callback     Instance of PDKCallback to receive success and failure callbacks
   */
  deletePath(String path, HashMap<String, String> params, PDKCallback callback)
  PDKClient.getInstance().getPath("me/", nil, new PDKCallback() {
      @Override
      public void onSuccess(PDKResponse response) 
      }

      @Override
      public void onFailure(PDKException exception) {
      }
  });
